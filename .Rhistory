alpha.in <- 1
while(ic <= nsteps & istop ==0){
ic = ic + 1
msqs <- rep(NA, length(alpha.cand))
for(j in 1:length(alpha.cand)){
msqs[j] <- compts[[1, j]] + t(compts[[2, j]]-compts[[2, which(alpha.cand == alpha.in)]])%*%B.m%*%(compts[[2, j]]-compts[[2, which(alpha.cand == alpha.in)]])
}
alpha.up <- alpha.cand[which.min(msqs)]
check <- abs(alpha.up-alpha.in)
if(check< 1e-04){istop = 1}
alpha.in <- alpha.up
}
alpha.opt <- alpha.up
beta.opt.f <- compts[[2, which(alpha.cand == alpha.up)]]
lambda.opt.f <- compts[[3, which(alpha.cand == alpha.up)]]
est <- bsbe%*%beta.opt.f
fitted <- inv.logit(est)
resids <- as.vector(y - inv.logit(est))
p.resids <- as.vector(resids/sqrt(inv.logit(est)*(1-inv.logit(est))))
ibeta <- function(x,a,b){ pbeta(x,a,b)*beta(a,b)}
ansch.r <- function(y, mu){
ansch.r <- (ibeta(y, 2/3, 2/3)-ibeta(mu, 2/3, 2/3))/(mu*(1-mu))^{1/6}
return(ansch.r)
}
a.resids <- ansch.r(y, fitted)
#####################################################################################################################
#####################################################################################################################
} else if(family =="p"){
beta.il <- rep(0, dim(bsbe)[2])
obj.f <- function(beta, pen, tun){
lambda = pen
alpha = tun
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
t1.f <- function(s) dpois(s, lambda = as.vector(exp(bsbe%*%beta)))^{1+alpha}
t1 <- sapply(s, FUN = t1.f)
t1 <- rowSums(t1)
t2 <- (1+1/alpha)*dpois(y, lambda = exp(bsbe%*%beta))^{alpha}
contr <- t1 - t2
obj <- as.numeric(sum(contr)+ lambda*t(beta)%*%Pen.matrix%*%beta)
return(-obj)
}
gradient <- function(beta, pen, tun){
lambda = pen
alpha = tun
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
gr1.f <-  function(s) (s-exp(bsbe%*%beta))*dpois(s, lambda = as.vector(exp(bsbe%*%beta)))^{1+alpha}
gr1 <- sapply(s, FUN = gr1.f)
gr1 <- rowSums(gr1)
gr2 <- (y-exp(bsbe%*%beta))*dpois(y, lambda = exp( bsbe%*%beta ))^{alpha}
gr.t <- gr1 - gr2
gr <- (1+alpha)*t(scale(t(bsbe), center = FALSE, scale = c(1/gr.t) ))# *diag(c(gr.t))%*%bsbe
gradient <- as.vector(colSums(gr) + 2*lambda*(Pen.matrix%*%beta))
return(-gradient)
}
hessian <-  function(beta, pen, tun){
lambda = pen
alpha = tun
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
w.f <- function(s) (s-exp(bsbe%*%beta))^2*dpois(s, lambda = exp(bsbe%*%beta))^{1+alpha}
wt <- sapply(s, FUN = w.f)
wt <- (1+alpha)*rowSums(wt)
hs <- scale(t(bsbe), center = FALSE, scale = c(1/wt))%*%bsbe + 2*lambda*Pen.matrix
return(-hs)
}
if(sel == "AIC"){
newraph <- function(lambda, beta.in, maxit = maxiter, tol = toler, alpha){
mnr <- maxNR(fn = obj.f, grad = gradient, hess = hessian, start = beta.in, pen =  lambda, tun =  alpha,
control = list(tol = tol, iterlim = maxit))
beta = mnr$estimate
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
w.f <- function(s) (s-exp(bsbe%*%beta))^2*dpois(s, lambda = exp(bsbe%*%beta))^{1+alpha}
wt <- sapply(s, FUN = w.f)
weights <- (1+alpha)*rowSums(wt)
gr1.f <-  function(s) (s-exp(bsbe%*%beta))*dpois(s, lambda = as.vector(exp(bsbe%*%beta)))^{1+alpha}
gr1 <- sapply(s, FUN = gr1.f)
gr1 <- rowSums(gr1)
gr2 <- (y-exp(bsbe%*%beta))*dpois(y, lambda = exp( bsbe%*%beta ))^{alpha}
gr.t <- gr1 - gr2
gr <- as.vector((1+alpha)*gr.t)
hess.f <- mnr$hessian
hat.tr <- sum(diag(  solve(-hess.f)%*%scale(t(bsbe), center = FALSE, scale = c(1/weights))%*%bsbe    ))
return(list(beta = beta, hat.tr = hat.tr, weights = weights, gr = gr, hess.f = hess.f))
}
} else if(sel == "GIC"){
newraph <- function(lambda, beta.in, maxit = maxiter, tol = toler, alpha){
mnr <- maxNR(fn = obj.f, grad = gradient, hess = hessian, start = beta.in, pen =  lambda, tun =  alpha,
control = list(tol = tol, iterlim = maxit))
beta = mnr$estimate
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
gr1.f <-  function(s) (s-exp(bsbe%*%beta))*dpois(s, lambda = as.vector(exp(bsbe%*%beta)))^{1+alpha}
gr1 <- sapply(s, FUN = gr1.f)
gr1 <- rowSums(gr1)
gr2 <- (y-exp(bsbe%*%beta))*dpois(y, lambda = exp( bsbe%*%beta ))^{alpha}
gr.t <- gr1 - gr2
gr <- as.vector((1+alpha)*gr.t)
hess.f <- mnr$hessian
Q.m <-  scale(t(bsbe), center = FALSE, scale = 1/(gr*c(y-exp(bsbe%*%beta))) )%*%bsbe  # + 2*lambda*Pen.matrix%*%(beta%*%t(colSums(c(y-exp(bsbe%*%beta))*bsbe)))/n      #GIC
hat.tr <- sum(diag(  solve(hess.f, Q.m   )))  #GIC
return(list(beta = beta, hat.tr = hat.tr, gr = gr, hess.f = hess.f))
}
}
obj.f.np <- function(beta, alpha){
means <- c(exp(bsbe%*%beta))
s <- seq(0, min(3*max(y),round(max(means) + 4*(max(means))^{1/3}) ) )
t1.f <- function(s) dpois(s, lambda = as.vector(exp(bsbe%*%beta)))^{1+alpha}
t1 <- sapply(s, FUN = t1.f)
t1 <- rowSums(t1)
t2 <- (1+1/alpha)*dpois(y, lambda = exp(bsbe%*%beta))^{alpha}
contr <- t1 - t2
obj <- as.numeric(sum(contr))
return(obj)
}
Pen.cr <- function(lambda, beta.in, alpha){
nr <- newraph(lambda, beta.in = beta.in, maxit = maxiter, alpha = alpha)
beta <- nr$beta
hat.tr <- nr$hat.tr
IC <- 2*(obj.f.np(beta, alpha)) + 2*hat.tr
return(IC)
}
lambda.cand <- c(2e-06, 7e-06, 2e-05, 7e-05, 2e-04, 7e-04, 2e-03, 7e-03, 2e-02, 7e-02, 2e-01, 7e-01, 3)
lambda.e.in <-  vapply(lambda.cand, FUN = Pen.cr, beta.in = beta.il, alpha = 1, FUN.VALUE = numeric(1))
wm <- which.min(lambda.e.in)
if(wm== 1){wm <- 2}
if(wm==length(lambda.cand)){ wm<- (length(lambda.cand)-1)}
lambda.opt.in  <- optimize(f = Pen.cr, interval = c(lambda.cand[wm-1], lambda.cand[wm+1]), beta.in = beta.il, alpha = 1)$minimum
beta.opt.in <- newraph(lambda.opt.in, beta.in = beta.il, maxit = maxiter, alpha = 1)$beta
B.m <-  bsplinepen(bsb, Lfdobj = 0)
comp.alpha <-  function(alpha){
lambda.e <- vapply(lambda.cand, FUN = Pen.cr, beta.in = beta.opt.in, alpha = alpha, FUN.VALUE = numeric(1))
wm <- which.min(lambda.e)
if(wm== 1){wm <- 2}
if(wm==length(lambda.cand)){ wm<- (length(lambda.cand)-1)}
lambda.opt  <- optimize(f = Pen.cr, interval = c(lambda.cand[wm-1], lambda.cand[wm+1]), alpha = alpha, beta.in = beta.opt.in)$minimum
opt. <- newraph(lambda.opt, beta.in = beta.opt.in, maxit = maxiter, alpha = alpha)
beta.opt  <- opt.$beta
gr <- opt.$gr
hessian.m <- -opt.$hess.f
K.m <- scale(t(bsbe), center = FALSE, scale = c(1/gr^2))%*%bsbe
msq1 <- sum( diag( solve(hessian.m, K.m%*%solve(hessian.m, B.m))   ) )
return(list(msq1 = msq1,  beta.opt = beta.opt, lambda.opt = lambda.opt))
}
compts <-  vapply(alpha.cand, FUN = comp.alpha, FUN.VALUE = rep(list(1), 3) )
ic <- 0
istop <- 0
alpha.in <- 1
while(ic <= nsteps & istop ==0){
ic = ic + 1
msqs <- rep(NA, length(alpha.cand))
for(j in 1:length(alpha.cand)){
msqs[j] <- compts[[1, j]] + t(compts[[2, j]]-compts[[2, which(alpha.cand == alpha.in)]])%*%B.m%*%(compts[[2, j]]-compts[[2, which(alpha.cand == alpha.in)]])
}
alpha.up <- alpha.cand[which.min(msqs)]
check <- abs(alpha.up-alpha.in)
if(check< 1e-04){istop = 1}
alpha.in <- alpha.up
}
alpha.opt <- alpha.up
beta.opt.f <- compts[[2, which(alpha.cand == alpha.up)]]
lambda.opt.f <- compts[[3, which(alpha.cand == alpha.up)]]
est <- bsbe%*%beta.opt.f
fitted <- exp(est)
resids <- as.vector(y - exp(est))
p.resids <- as.vector(resids/sqrt(exp(est)))
ansch.r <- function(y, mu){
ansch.r <- 3*(y^{2/3}-mu^{2/3})/(2*mu^{1/6})
return(ansch.r)
}
a.resids <- ansch.r(y, fitted)
}
return(list(est = est, resids = resids, fitted = fitted, a.resids = a.resids,
nsteps = ic, p.resids = p.resids, lambda = lambda.opt.f, alpha = alpha.opt, family = family))
}
require(SemiPar)
require(quantreg)
require(MASS)
########################################################## LIDAR ###############################################################
data(lidar)
y <- lidar$logratio
x <- lidar$range
plot(x, y, cex = 1.2, pch = 19) ; grid()
fit.AIC <- dpd(x, y, family = "g", sel = "AIC")
fit.GIC <- dpd(x, y, family = "g", sel = "GIC")
lines(x, fit.AIC$fitted, lwd = 4, col = "blue")
lines(x, fit.GIC$fitted, lwd = 4, col = "darkgray",)
legend("bottomleft", legend = c("DPD with AIC", "DPD with GIC"), lwd = c(4,4), col = c("blue", "darkgray"), cex = 1.4)
fit.AIC$alpha
y <- mcycle$accel
x <- mcycle$times
plot(x, y, cex = 1.2, pch = 19) ; grid()
fit.mcycle <- dpd(x, y, family = "g")
lines(x, fit.mcycle$fitted, lwd = 4, col = "blue")
fit.mcycle$alpha
data("age.income")
age.income <- age.income[order(age.income$age),]
x <- age.income$age
y <- age.income$log.income
plot(x, y, cex = 1.2, pch = 19, xlab = "Income", ylab = "Age") ; grid()
fit.ai <- dpd(x, y, family= "g")
fit.ai$alpha
lines(x, fit.ai$fitted, lwd = 4, col = "blue")
data("Mammals")
Mammals <- Mammals[order(Mammals$weight), ]
Mammals$weight <- log(Mammals$weight)
Mammals$speed <- log(Mammals$speed)
x <- Mammals$weight
y <- Mammals$speed
plot(x, y, cex = 1.2, pch = 19, xlab = "Weight (log)", ylab = "Speed (log)")
fit.mamAIC <- dpd(x, y, sel = "AIC")
fit.mamGIC <- dpd(x, y, sel = "GIC")
fit.gam <- gam(y~s(x, k = 40, bs = "cr"))
lines(x, fit.mamAIC$fitted, lwd = 4, col = "blue")
lines(x, fit.mamGIC$fitted, lwd = 4, col = "darkgray")
lines(x, fit.gam$fitted.values, lwd = 4, col = "red", lty = 2)
legend("bottomright", legend = c("DPD with AIC", "DPD with GIC", "GAM"), lwd = c(4,4, 4), lty = c(1, 1, 2),
col = c("blue", "darkgray", "red"), cex = 1.4)
fit.mamGIC$alpha
#hist(fit.mamGIC$p.resids, col = "gray")
# Numerous outliers
require(mgcv)
fit.gam <- gam(y~s(x, k = 40, bs = "cr"))
lines(x, fit.mamAIC$fitted, lwd = 4, col = "blue")
lines(x, fit.mamGIC$fitted, lwd = 4, col = "darkgray")
lines(x, fit.gam$fitted.values, lwd = 4, col = "red", lty = 2)
legend("bottomright", legend = c("DPD with AIC", "DPD with GIC", "GAM"), lwd = c(4,4, 4), lty = c(1, 1, 2),
col = c("blue", "darkgray", "red"), cex = 1.4)
fit.mamGIC$alpha
require(SemiPar)
require(mgcv)
require(ggplot2)
require(mlbench)
############################################# Birthweight and dysplasia #############################################################
data(bpd)
bpd <- bpd[order(bpd$birthweight),]
x <- bpd$birthweight
y <- bpd$BPD
plot(x,y)
fit <- dpd(x, y, family = "b")
fit.gam <- mgcv::gam(y~s(x, k = 40), family = binomial)
lines(x, fit$fitted, lwd = 3, col = "blue", type = "l")
lines(x, fit.gam$fitted.values, lwd = 3, col = "red")
fit$alpha
outliers <- ifelse(abs(fit$a.resids)>2.6, 1, 0) # Anscombe residuals
sum(outliers)
df <- data.frame(x = x, y = y, fit.dpd =  fit$fitted, fit.gam = fit.gam$fitted.values, out = outliers )
p <- ggplot(data = df, aes(x = x, y = y, colour = as.factor(out), shape = as.factor(out) )) + labs(x = "Birthweight", y = "Probability of dysplasia")
p <- p + geom_jitter(data = df, aes(y = y), height = 0.04, size = 4) + theme_bw(base_size = 35) + guides(color = "none") + guides(shape = "none")
p <- p + geom_line(data = df, aes(y = fit.dpd, x = x, group = 1), colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x, y = fit.gam, group = 1), colour = "red", linetype = 2, size = 1.4)
p <- p + scale_color_manual(values=c("gray", "purple"))
p
data(PimaIndiansDiabetes)
pima <- PimaIndiansDiabetes
pima$diabetes <- ifelse(pima$diabetes == "pos", 1, 0)
pima <- pima[order(pima$glucose),]
x <- pima$glucose
y <- pima$diabetes
plot(x, y)
fit <- dpd(x, y, family = "b")
fit.gam <- mgcv::gam(y~s(x, k = 40), family = binomial)
fit$alpha
hist(fit$a.resids, xlab = "Anscombe residuals") # Anscombe residuals
outliers <- ifelse(abs(fit$a.resids)>2.6, 1, 0)
sum(outliers)
df <- data.frame(x = x, y = y, fit.dpd =  fit$fitted, fit.gam = fit.gam$fitted.values, out = outliers )
p <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), shape = as.factor(out) ))  + labs(x = "Plasma glucose", y = "Probability of Diabetes")
p <- p + geom_jitter(data = df, aes(y = y), height = 0.04, size = 4) + theme_bw(base_size = 35)+ guides(color = "none") + guides(shape = "none")
p <- p + geom_line(aes(x = x, y = fit.dpd, group = 1), colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x, y = fit.gam, group = 1), colour = "red", linetype = 2, size = 1.4)
p <- p + scale_color_manual(values=c("gray", "purple"))
p
plot(x, y)
lines(x, fit$fitted, lwd = 3, col = "blue", type = "l")
lines(x, fit.gam$fitted.values, lwd = 3, col = "red")
lines(x, fit$fitted, lwd = 3, col = "blue", type = "l")
lines(x, fit.gam$fitted.values, lwd = 3, col = "red")
fit$alpha
hist(fit$a.resids, xlab = "Anscombe residuals") # Anscombe residuals
outliers <- ifelse(abs(fit$a.resids)>2.6, 1, 0)
sum(outliers)
df <- data.frame(x = x, y = y, fit.dpd =  fit$fitted, fit.gam = fit.gam$fitted.values, out = outliers )
p <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), shape = as.factor(out) ))  + labs(x = "Plasma glucose", y = "Probability of Diabetes")
p <- p + geom_jitter(data = df, aes(y = y), height = 0.04, size = 4) + theme_bw(base_size = 35)+ guides(color = "none") + guides(shape = "none")
p <- p + geom_line(aes(x = x, y = fit.dpd, group = 1), colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x, y = fit.gam, group = 1), colour = "red", linetype = 2, size = 1.4)
p <- p + scale_color_manual(values=c("gray", "purple"))
p
require(ggplot2)
require(mgcv)
zf <- read.table("C:/Users/u0111580/Desktop/LOSdata.csv", header = TRUE, sep = ";")
# modify the above line as needed
Pop  = data.frame(LOS=zf$LOS,Age=zf$Age,Sex=zf$Sexe,DRG=zf$DRG,MDC=zf$MDC,Nbdg=zf$NbDiag,Nbtt=zf$NbAct,CW=zf$CWeff)
table(Pop$MDC) # Number of observations per DRG
########################################### DRG: Diseases and disorders of the eye #################################################
pop = Pop[Pop$MDC=="02",]
pop <- pop[order(pop$Age),]
x <- pop$Age
require(ggplot2)
require(mgcv)
# Import data
zf <- read.table("C:/Users/u0111580/Desktop/LOSdata.csv", header = TRUE, sep = ";")
# modify the above line as needed
Pop  = data.frame(LOS=zf$LOS,Age=zf$Age,Sex=zf$Sexe,DRG=zf$DRG,MDC=zf$MDC,Nbdg=zf$NbDiag,Nbtt=zf$NbAct,CW=zf$CWeff)
table(Pop$MDC) # Number of observations per DRG
########################################### DRG: Diseases and disorders of the eye #################################################
pop = Pop[Pop$MDC=="02",]
pop <- pop[order(pop$Age),]
x <- pop$Age
y <- pop$LOS-1
plot(x, y)
pr <- dpd(x, y, family = "p")
pr.gam <- gam(y~s(x, bs = "cr", k = 40), family = poisson)
lines(x, pr$fitted, lwd = 3, col = "blue")
lines(x, pr.gam$fitted.values, lwd = 3, col = "red", lty = 2)
pr$alpha
## Plot in the log scake
outliers <- ifelse(abs(pr$a.resids) > 2.6, 1, 0)
sum(outliers)
library(ggplot2)
df <- data.frame(x = x, y = log(y+1), pr =  log(pr$fitted+1), fit.gam = log(pr.gam$fitted.values+1), out = as.vector(outliers ))
p1 <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), size = 4)) + geom_point( aes(shape = as.factor(out)))  + labs(x = "Age", y = "log(LOS+1)")
p1 <- p1 + theme_bw(base_size = 35) + guides(color= "none", shape = "none", size = "none")
p1 <- p1 + geom_line(aes(x = x, y = pr), data = df, colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x,y = fit.gam), colour = "red", linetype = 5, size = 1.4)
p1 <- p1 + scale_color_manual(values=c("gray", "purple"))
p1
########################################### DRG: Diseases and disorders of the eye #################################################
pop = Pop[Pop$MDC=="02",]
pop <- pop[order(pop$Age),]
x <- pop$Age
y <- pop$LOS-1
plot(x, y, cex = 1.2, pch = 19)
pr <- dpd(x, y, family = "p")
pr.gam <- gam(y~s(x, bs = "cr", k = 40), family = poisson)
lines(x, pr$fitted, lwd = 3, col = "blue")
lines(x, pr.gam$fitted.values, lwd = 3, col = "red", lty = 2)
pr$alpha
## Plot in the log scake
outliers <- ifelse(abs(pr$a.resids) > 2.6, 1, 0)
sum(outliers)
library(ggplot2)
df <- data.frame(x = x, y = log(y+1), pr =  log(pr$fitted+1), fit.gam = log(pr.gam$fitted.values+1), out = as.vector(outliers ))
p1 <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), size = 4)) + geom_point( aes(shape = as.factor(out)))  + labs(x = "Age", y = "log(LOS+1)")
p1 <- p1 + theme_bw(base_size = 35) + guides(color= "none", shape = "none", size = "none")
p1 <- p1 + geom_line(aes(x = x, y = pr), data = df, colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x,y = fit.gam), colour = "red", linetype = 5, size = 1.4)
p1 <- p1 + scale_color_manual(values=c("gray", "purple"))
p1
pop = Pop[Pop$MDC=="12",]
pop <- pop[order(pop$Age),]
x <- pop$Age
y <- pop$LOS-1
plot(x, y, cex = 1.2, pch = 19)
pr <- dpd(x, y, family = "p")
pr.gam <- gam(y~s(x, bs = "cr", k = 40), family = poisson)
lines(x, pr$fitted, lwd = 3, col = "blue")
lines(x, pr.gam$fitted.values, lwd = 3, col = "red", lty = 2)
pr$alpha
## Plot in the log scake
outliers <- ifelse(abs(pr$a.resids) > 2.6, 1, 0)
sum(outliers)
library(ggplot2)
df <- data.frame(x = x, y = log(y+1), pr =  log(pr$fitted+1), fit.gam = log(pr.gam$fitted.values+1), out = as.vector(outliers ))
p2 <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), size = 4)) + geom_point( aes(shape = as.factor(out)))  + labs(x = "Age", y = "log(LOS+1)")
p2 <- p2 + theme_bw(base_size = 35) + guides(color= "none", shape = "none", size = "none")
p2 <- p2 + geom_line(aes(x = x, y = pr), data = df, colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x,y = fit.gam), colour = "red", linetype = 5, size = 1.4)
p2 <- p2 + scale_color_manual(values=c("gray", "purple"))
p2
p1
p2
p1
p2
p1
p2
require(SemiPar)
require(mgcv)
require(ggplot2)
require(mlbench)
############################################# Birthweight and dysplasia #############################################################
data(bpd)
bpd <- bpd[order(bpd$birthweight),]
x <- bpd$birthweight
y <- bpd$BPD
plot(x,y)
fit <- dpd(x, y, family = "b")
fit.gam <- mgcv::gam(y~s(x, k = 40), family = binomial)
lines(x, fit$fitted, lwd = 3, col = "blue", type = "l")
lines(x, fit.gam$fitted.values, lwd = 3, col = "red")
fit$alpha
outliers <- ifelse(abs(fit$a.resids)>2.6, 1, 0) # Anscombe residuals
sum(outliers)
df <- data.frame(x = x, y = y, fit.dpd =  fit$fitted, fit.gam = fit.gam$fitted.values, out = outliers )
p <- ggplot(data = df, aes(x = x, y = y, colour = as.factor(out), shape = as.factor(out) )) + labs(x = "Birthweight", y = "Probability of dysplasia")
p <- p + geom_jitter(data = df, aes(y = y), height = 0.04, size = 4) + theme_bw(base_size = 35) + guides(color = "none") + guides(shape = "none")
p <- p + geom_line(data = df, aes(y = fit.dpd, x = x, group = 1), colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x, y = fit.gam, group = 1), colour = "red", linetype = 2, size = 1.4)
p <- p + scale_color_manual(values=c("gray", "purple"))
p
data(PimaIndiansDiabetes)
pima <- PimaIndiansDiabetes
pima$diabetes <- ifelse(pima$diabetes == "pos", 1, 0)
pima <- pima[order(pima$glucose),]
x <- pima$glucose
y <- pima$diabetes
plot(x, y)
fit <- dpd(x, y, family = "b")
fit.gam <- mgcv::gam(y~s(x, k = 40), family = binomial)
lines(x, fit$fitted, lwd = 3, col = "blue", type = "l")
lines(x, fit.gam$fitted.values, lwd = 3, col = "red")
fit$alpha
hist(fit$a.resids, xlab = "Anscombe residuals") # Anscombe residuals
outliers <- ifelse(abs(fit$a.resids)>2.6, 1, 0)
sum(outliers)
df <- data.frame(x = x, y = y, fit.dpd =  fit$fitted, fit.gam = fit.gam$fitted.values, out = outliers )
p <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), shape = as.factor(out) ))  + labs(x = "Plasma glucose", y = "Probability of Diabetes")
p <- p + geom_jitter(data = df, aes(y = y), height = 0.04, size = 4) + theme_bw(base_size = 35)+ guides(color = "none") + guides(shape = "none")
p <- p + geom_line(aes(x = x, y = fit.dpd, group = 1), colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x, y = fit.gam, group = 1), colour = "red", linetype = 2, size = 1.4)
p <- p + scale_color_manual(values=c("gray", "purple"))
p
require(ggplot2)
require(mgcv)
# Import data
zf <- read.table("C:/Users/u0111580/Desktop/LOSdata.csv", header = TRUE, sep = ";")
# modify the above line as needed
Pop  = data.frame(LOS=zf$LOS,Age=zf$Age,Sex=zf$Sexe,DRG=zf$DRG,MDC=zf$MDC,Nbdg=zf$NbDiag,Nbtt=zf$NbAct,CW=zf$CWeff)
table(Pop$MDC) # Number of observations per DRG
########################################### DRG: Diseases and disorders of the eye #################################################
pop = Pop[Pop$MDC=="02",]
pop <- pop[order(pop$Age),]
x <- pop$Age
y <- pop$LOS-1
plot(x, y, cex = 1.2, pch = 19)
pr <- dpd(x, y, family = "p")
pr.gam <- gam(y~s(x, bs = "cr", k = 40), family = poisson)
lines(x, pr$fitted, lwd = 3, col = "blue")
lines(x, pr.gam$fitted.values, lwd = 3, col = "red", lty = 2)
pr$alpha
## Plot in the log scake
outliers <- ifelse(abs(pr$a.resids) > 2.6, 1, 0)
sum(outliers)
library(ggplot2)
df <- data.frame(x = x, y = log(y+1), pr =  log(pr$fitted+1), fit.gam = log(pr.gam$fitted.values+1), out = as.vector(outliers ))
p1 <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), size = 4)) + geom_point( aes(shape = as.factor(out)))  + labs(x = "Age", y = "log(LOS+1)")
p1 <- p1 + theme_bw(base_size = 35) + guides(color= "none", shape = "none", size = "none")
p1 <- p1 + geom_line(aes(x = x, y = pr), data = df, colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x,y = fit.gam), colour = "red", linetype = 5, size = 1.4)
p1 <- p1 + scale_color_manual(values=c("gray", "purple"))
p1
########################################### DRG: Diseases and disorders of the male reproductive system ############################
pop = Pop[Pop$MDC=="12",]
pop <- pop[order(pop$Age),]
x <- pop$Age
y <- pop$LOS-1
plot(x, y, cex = 1.2, pch = 19)
pr <- dpd(x, y, family = "p")
pr.gam <- gam(y~s(x, bs = "cr", k = 40), family = poisson)
lines(x, pr$fitted, lwd = 3, col = "blue")
lines(x, pr.gam$fitted.values, lwd = 3, col = "red", lty = 2)
pr$alpha
## Plot in the log scake
outliers <- ifelse(abs(pr$a.resids) > 2.6, 1, 0)
sum(outliers)
library(ggplot2)
df <- data.frame(x = x, y = log(y+1), pr =  log(pr$fitted+1), fit.gam = log(pr.gam$fitted.values+1), out = as.vector(outliers ))
p2 <- ggplot(df, aes(x = x, y = y, colour = as.factor(out), size = 4)) + geom_point( aes(shape = as.factor(out)))  + labs(x = "Age", y = "log(LOS+1)")
p2 <- p2 + theme_bw(base_size = 35) + guides(color= "none", shape = "none", size = "none")
p2 <- p2 + geom_line(aes(x = x, y = pr), data = df, colour = "blue", linetype = 1, size = 1.4) + geom_line(aes(x = x,y = fit.gam), colour = "red", linetype = 5, size = 1.4)
p2 <- p2 + scale_color_manual(values=c("gray", "purple"))
p2
require(SemiPar)
require(quantreg)
require(MASS)
require(mgcv)
########################################################## LIDAR ###############################################################
data(lidar)
y <- lidar$logratio
x <- lidar$range
plot(x, y, cex = 1.2, pch = 19) ; grid()
fit.AIC <- dpd(x, y, family = "g", sel = "AIC")
fit.GIC <- dpd(x, y, family = "g", sel = "GIC")
lines(x, fit.AIC$fitted, lwd = 4, col = "blue")
lines(x, fit.GIC$fitted, lwd = 4, col = "darkgray",)
legend("bottomleft", legend = c("DPD with AIC", "DPD with GIC"), lwd = c(4,4), col = c("blue", "darkgray"), cex = 1.4)
fit.AIC$alpha
y <- mcycle$accel
x <- mcycle$times
plot(x, y, cex = 1.2, pch = 19) ; grid()
fit.mcycle <- dpd(x, y, family = "g")
lines(x, fit.mcycle$fitted, lwd = 4, col = "blue")
fit.mcycle$alpha
data("age.income")
age.income <- age.income[order(age.income$age),]
x <- age.income$age
y <- age.income$log.income
plot(x, y, cex = 1.2, pch = 19, xlab = "Income", ylab = "Age") ; grid()
fit.ai <- dpd(x, y, family= "g")
fit.ai$alpha
lines(x, fit.ai$fitted, lwd = 4, col = "blue")
data("Mammals")
Mammals <- Mammals[order(Mammals$weight), ]
Mammals$weight <- log(Mammals$weight)
Mammals$speed <- log(Mammals$speed)
x <- Mammals$weight
y <- Mammals$speed
plot(x, y, cex = 1.2, pch = 19, xlab = "Weight (log)", ylab = "Speed (log)")
fit.mamAIC <- dpd(x, y, sel = "AIC")
fit.mamGIC <- dpd(x, y, sel = "GIC")
fit.gam <- gam(y~s(x, k = 40, bs = "cr"))
lines(x, fit.mamAIC$fitted, lwd = 4, col = "blue")
lines(x, fit.mamGIC$fitted, lwd = 4, col = "darkgray")
lines(x, fit.gam$fitted.values, lwd = 4, col = "red", lty = 2)
legend("bottomright", legend = c("DPD with AIC", "DPD with GIC", "GAM"), lwd = c(4,4, 4), lty = c(1, 1, 2),
col = c("blue", "darkgray", "red"), cex = 1.4)
fit.mamGIC$alpha
hist(fit.mamGIC$p.resids, col = "gray")
